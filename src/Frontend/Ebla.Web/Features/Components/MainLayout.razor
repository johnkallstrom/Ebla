@inherits LayoutComponentBase

<MudThemeProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="(() => ToggleDrawer())"></MudIconButton>
        <MudLink Href="/" Typo="Typo.h5" Color="Color.Inherit" Underline="Underline.None" Class="ml-3">Ebla</MudLink>
        <MudSpacer />
        <AuthorizeView>
            <Authorized>
                <MudMenu>
                    <ActivatorContent>
                        <MudAvatar Color="Color.Tertiary">@avatarLetter</MudAvatar>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem>Profile</MudMenuItem>
                        <MudMenuItem>My Loans</MudMenuItem>
                        <MudMenuItem>My Reservations</MudMenuItem>
                        <MudMenuItem OnClick="(() => SignOut())">Sign out</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </Authorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer @bind-Open="enableDrawer" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavigationMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer Fixed="true" Class="py-6">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public ILocalStorageService LocalStorage { get; set; }

    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    bool enableDrawer = true;
    string avatarLetter = "A";

    void ToggleDrawer()
    {
        enableDrawer = !enableDrawer;
    }

    async Task SignOut()
    {
        await LocalStorage.RemoveItemAsync("token");
        NavigationManager.NavigateToAndRefresh(NavigationManager.BaseUri);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        avatarLetter = user.GetAvatarLetter();
    }
}